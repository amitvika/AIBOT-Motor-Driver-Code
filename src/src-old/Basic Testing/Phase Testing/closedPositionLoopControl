// ⬅️ keep this at the very top so the library compiles with debug enabled
#define SIMPLEFOC_DEBUG 1

#include <Arduino.h>
#include <SPI.h>
#include <SimpleFOC.h>

// ---------- Your wiring ----------
const int PIN_U = 38;      // phase U PWM
const int PIN_V = 39;      // phase V PWM
const int PIN_W = 40;      // phase W PWM

// AS5047P SPI pins (match your working test)
const int SPI_CS_PIN   = 4;
const int SPI_SCK_PIN  = 12;
const int SPI_MISO_PIN = 13;
const int SPI_MOSI_PIN = 14;

// ---------- Motor/driver params ----------
#define POLE_PAIRS        7        // set to your motor
const float SUPPLY_VOLTAGE = 25.0;
const float VOLTAGE_LIMIT   = 2.0;   // raise if needed
const float ALIGN_VOLTAGE   = 1.0;   // stronger alignment torque
const long  PWM_FREQ        = 3000;  // quiet PWM
const float VELOCITY_LIMIT  = 1000.0f; // <-- ADDED: Max velocity in rad/s

// ---------- Objects ----------
BLDCMotor motor(POLE_PAIRS);
BLDCDriver3PWM driver(PIN_U, PIN_V, PIN_W);

// Use SimpleFOC's AS5047 config, with your CS pin
MagneticSensorSPI sensor(AS5047_SPI, SPI_CS_PIN);

// Target angle variable for the loop
float target_angle = 0;

void setup() {
  Serial.begin(115200);
  delay(200);
  Serial.println(F("\nSimpleFOC Position Control Example"));

  // Use your custom SPI pins exactly like the test sketch
  pinMode(SPI_CS_PIN, OUTPUT);
  digitalWrite(SPI_CS_PIN, HIGH);
  SPI.begin(SPI_SCK_PIN, SPI_MISO_PIN, SPI_MOSI_PIN, SPI_CS_PIN);

  // Init sensor
  sensor.init();

  // Quick sanity check: read raw angle before FOC
  float a0 = sensor.getAngle();
  delay(10);
  float a1 = sensor.getAngle();
  Serial.print(F("Sensor angle check (rad): ")); Serial.print(a0, 4);
  Serial.print(F(" -> ")); Serial.println(a1, 4);

  // Driver
  driver.voltage_power_supply = SUPPLY_VOLTAGE;
  driver.pwm_frequency        = PWM_FREQ;
  driver.init();
  driver.enable();

  // Motor
  motor.linkDriver(&driver);
  motor.linkSensor(&sensor);

  motor.controller           = MotionControlType::angle; // <-- CHANGED from ::velocity
  motor.torque_controller    = TorqueControlType::voltage;
  motor.voltage_limit        = VOLTAGE_LIMIT;
  motor.voltage_sensor_align = ALIGN_VOLTAGE;
  motor.velocity_limit       = VELOCITY_LIMIT; // <-- ADDED

  // --- ANGLE P-CONTROLLER ---
  motor.P_angle.P = 20.0f; // <-- ADDED: Proportional gain for position control

  // --- VELOCITY PID (inner loop) ---
  // A well-tuned velocity loop is crucial for good position control
  motor.PID_velocity.P  = 0.2f;
  motor.PID_velocity.I  = 5.0f;
  motor.PID_velocity.D  = 0.0f;
  motor.LPF_velocity.Tf = 0.02f;

  motor.init();
  motor.initFOC();   // will move a bit for alignment

  Serial.println(F("FOC ready – running closed-loop position control."));
}

void loop() {
  motor.loopFOC();

  // A simple example: move smoothly back and forth in a sine wave
  // The amplitude is PI radians (180 degrees)
  // The frequency is controlled by the divisor (1000.0f here)
  target_angle = PI * sin(millis() / 1000.0f);

  // Set the target angle for the motor
  motor.move(target_angle); // <-- CHANGED: Argument is now an angle in radians
}